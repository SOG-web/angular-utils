import fs from "node:fs";
import path from "node:path";
import { findMainStylesFile, findTailwindConfig } from "./file-discovery.js";

export interface FontImportForInjection {
  family: string;
  options: {
    variable?: string;
    fallback?: string[];
  };
}

/**
 * Inject font CSS and preload links into index.html
 * Uses idempotent comment markers to prevent duplicates
 */
export function injectFontResources(
  indexPath: string,
  preloadLinks: string
): void {
  if (!fs.existsSync(indexPath)) {
    return;
  }

  let indexContent = fs.readFileSync(indexPath, "utf8");

  // 1. Add fonts.css link if not present
  if (!indexContent.includes('href="assets/fonts.css"')) {
    const fontCssLink = `  <link rel="stylesheet" href="assets/fonts.css">`;

    if (indexContent.includes("<!-- Font CSS -->")) {
      // Replace existing font CSS section
      indexContent = indexContent.replace(
        /<!-- Font CSS -->[\s\S]*?<!-- End Font CSS -->/,
        `<!-- Font CSS -->\n${fontCssLink}\n  <!-- End Font CSS -->`
      );
    } else {
      // Add before </head>
      const headCloseIndex = indexContent.indexOf("</head>");
      if (headCloseIndex !== -1) {
        const cssSection = `  <!-- Font CSS -->\n${fontCssLink}\n  <!-- End Font CSS -->\n`;
        indexContent =
          indexContent.slice(0, headCloseIndex) +
          cssSection +
          indexContent.slice(headCloseIndex);
      }
    }
  }

  // 2. Add preload links if provided
  if (preloadLinks) {
    if (indexContent.includes("<!-- Font Preloads -->")) {
      // Replace existing preload section
      indexContent = indexContent.replace(
        /<!-- Font Preloads -->[\s\S]*?<!-- End Font Preloads -->/,
        `<!-- Font Preloads -->\n  ${preloadLinks}\n  <!-- End Font Preloads -->`
      );
    } else {
      // Add preload links before </head>
      const headCloseIndex = indexContent.indexOf("</head>");
      if (headCloseIndex !== -1) {
        const preloadSection = `  <!-- Font Preloads -->\n  ${preloadLinks}\n  <!-- End Font Preloads -->\n`;
        indexContent =
          indexContent.slice(0, headCloseIndex) +
          preloadSection +
          indexContent.slice(headCloseIndex);
      }
    }
  }

  fs.writeFileSync(indexPath, indexContent, "utf8");
}

/**
 * Inject Tailwind v4 @theme configuration into styles file
 */
export function injectTailwindV4(
  sourceRoot: string,
  projectRoot: string,
  fontImports: FontImportForInjection[],
  customFile?: string
): void {
  // Find the main styles file
  const stylesFile = customFile || findMainStylesFile(sourceRoot, projectRoot);
  if (!stylesFile || !fs.existsSync(stylesFile)) {
    return;
  }

  let stylesContent = fs.readFileSync(stylesFile, "utf8");

  // Build theme configuration - only generate unique font names
  const fontConfig: string[] = [];

  for (const f of fontImports.filter((f) => f.options.variable)) {
    const varName = f.options.variable;
    const fallbacks = f.options.fallback || ["system-ui", "sans-serif"];
    const fontStack = `var(${varName}), ${fallbacks.join(", ")}`;
    const uniqueName = f.family.toLowerCase().replace(/\s+/g, "-");

    // Only add unique font name - let Tailwind handle sans/serif/mono
    fontConfig.push(`  --font-family-${uniqueName}: ${fontStack};`);
  }

  // Add helper comment for standard Tailwind classes
  const helperComment = `  /* To use standard Tailwind classes (font-sans, font-serif), add them here:
   * --font-family-sans: var(--font-inter), system-ui, sans-serif;
   * --font-family-serif: var(--font-playfair-display), serif;
   */`;

  const themeBlock = `
/* Font Configuration - Generated by angular-fonts */
@theme {
${helperComment}
${fontConfig.join("\n")}
}
`;

  // Check if theme block already exists
  if (
    stylesContent.includes(
      "/* Font Configuration - Generated by angular-fonts */"
    )
  ) {
    // Replace existing
    stylesContent = stylesContent.replace(
      /\/\* Font Configuration - Generated by angular-fonts \*\/[\s\S]*?@theme \{[\s\S]*?\}\n/,
      themeBlock
    );
  } else {
    // Add after @import 'tailwindcss';
    if (stylesContent.includes("@import 'tailwindcss'")) {
      stylesContent = stylesContent.replace(
        /@import 'tailwindcss';/,
        `@import 'tailwindcss';${themeBlock}`
      );
    } else {
      // Add at the end
      stylesContent += `\n${themeBlock}`;
    }
  }

  fs.writeFileSync(stylesFile, stylesContent, "utf8");
}

/**
 * Inject Tailwind v3 configuration into tailwind.config file
 */
export function injectTailwindV3(
  projectRoot: string,
  fontImports: FontImportForInjection[],
  customFile?: string
): void {
  const configFile = customFile || findTailwindConfig(projectRoot);
  if (!configFile || !fs.existsSync(configFile)) {
    return;
  }

  let configContent = fs.readFileSync(configFile, "utf8");

  // Build fontFamily configuration - only generate unique font names
  const fontFamilies: string[] = [];

  for (const f of fontImports.filter((f) => f.options.variable)) {
    const varName = f.options.variable;
    const fallbacks = f.options.fallback || ["system-ui", "sans-serif"];
    const fontStack = `['var(${varName})', ${fallbacks.map((fb) => `'${fb}'`).join(", ")}]`;
    const uniqueName = f.family.toLowerCase().replace(/\s+/g, "-");

    // Only add unique font name - let user configure sans/serif/mono manually
    fontFamilies.push(`        '${uniqueName}': ${fontStack},`);
  }

  // Add helper comment
  const helperComment = `        // To use standard Tailwind classes (font-sans, font-serif), add them here:
        // sans: ['var(--font-inter)', 'system-ui', 'sans-serif'],
        // serif: ['var(--font-playfair-display)', 'serif'],`;

  const fontConfig = `      fontFamily: {
${helperComment}
${fontFamilies.join("\n")}
      },`;

  // Insert into theme.extend or create it
  if (configContent.includes("extend:")) {
    // Add to existing extend
    if (configContent.includes("fontFamily:")) {
      // Replace existing fontFamily
      configContent = configContent.replace(
        /fontFamily:\s*\{[^}]*\},?/,
        fontConfig
      );
    } else {
      // Add fontFamily to extend
      configContent = configContent.replace(
        /(extend:\s*\{)/,
        `$1\n${fontConfig}`
      );
    }
  } else {
    // Create theme.extend
    configContent = configContent.replace(
      /(module\.exports\s*=\s*\{)/,
      `$1\n  theme: {\n    extend: {\n${fontConfig}\n    }\n  },`
    );
  }

  fs.writeFileSync(configFile, configContent, "utf8");
}
